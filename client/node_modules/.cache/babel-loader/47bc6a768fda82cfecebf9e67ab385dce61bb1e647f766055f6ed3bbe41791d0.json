{"ast":null,"code":"import{toast}from'react-toastify';class NotificationService{constructor(){this.checkPermission();this.notifications=[];this.initialized=false;this.debugMode=true;// Enable debug mode\n}// Check if browser notifications are supported and permission is granted\ncheckPermission(){this.hasSupport='Notification'in window;this.permission=this.hasSupport?Notification.permission:'denied';return this.permission==='granted';}// Request permission for browser notifications\nasync requestPermission(){if(!this.hasSupport){console.log('Browser notifications not supported');return false;}try{if(this.permission!=='granted'){const permission=await Notification.requestPermission();this.permission=permission;console.log(\"Notification permission: \".concat(permission));return permission==='granted';}return true;}catch(error){console.error('Error requesting notification permission:',error);return false;}}// Initialize the notification service\nasync initialize(){if(this.initialized)return;try{const hasPermission=await this.requestPermission();if(hasPermission){console.log('Notification permission granted');// Send a test notification to confirm it's working\nif(this.debugMode){this.showTestNotification();}}else{console.log('Notification permission denied');}this.initialized=true;}catch(error){console.error('Error initializing notification service:',error);}}// Show a test notification\nshowTestNotification(){const title='Notification Test';const options={body:'Notifications are working correctly!',icon:'/logo192.png'};// Show browser notification\nif(this.permission==='granted'){try{new Notification(title,options);}catch(error){console.error('Error showing browser notification:',error);}}// Always show toast notification\ntoast.info('Notification system initialized successfully',{autoClose:3000});}// Schedule a notification for an appointment\nscheduleNotification(appointment){if(!appointment||!appointment.date)return;try{const appointmentDate=new Date(appointment.date);const[hours,minutes]=appointment.startTime.split(':').map(Number);appointmentDate.setHours(hours,minutes);// For debugging: show notification 10 seconds from now if in debug mode\nlet notificationTime;if(this.debugMode){var _appointment$service;notificationTime=new Date(Date.now()+10000);// 10 seconds from now\nconsole.log(\"Debug: Scheduling notification for \".concat((_appointment$service=appointment.service)===null||_appointment$service===void 0?void 0:_appointment$service.name,\" in 10 seconds\"));}else{// Schedule notification 1 hour before appointment\nnotificationTime=new Date(appointmentDate.getTime()-60*60*1000);}const now=new Date();// Only schedule if the notification time is in the future\nif(notificationTime>now){const timeUntilNotification=notificationTime.getTime()-now.getTime();console.log(\"Scheduling notification for \".concat(timeUntilNotification,\"ms from now\"));// Store notification info\nconst notificationId=setTimeout(()=>{this.showNotification(appointment);},timeUntilNotification);this.notifications.push({id:notificationId,appointment,time:notificationTime});return notificationId;}else{console.log('Notification time is in the past, not scheduling');}}catch(error){console.error('Error scheduling notification:',error);}return null;}// Cancel a scheduled notification\ncancelNotification(notificationId){clearTimeout(notificationId);this.notifications=this.notifications.filter(n=>n.id!==notificationId);}// Show a notification for an appointment\nshowNotification(appointment){try{var _appointment$service2,_appointment$business;const title=\"Upcoming Appointment: \".concat(((_appointment$service2=appointment.service)===null||_appointment$service2===void 0?void 0:_appointment$service2.name)||'Appointment');const options={body:\"Your appointment with \".concat((_appointment$business=appointment.business)===null||_appointment$business===void 0?void 0:_appointment$business.name,\" is in 1 hour at \").concat(appointment.startTime,\".\"),icon:'/logo192.png'};console.log('Showing notification:',title);// Show browser notification if permission granted\nif(this.permission==='granted'){new Notification(title,options);}// Always show toast notification\ntoast.info(title+'\\n'+options.body,{autoClose:10000// 10 seconds\n});}catch(error){console.error('Error showing notification:',error);// Fallback to toast notification\ntoast.info('You have an upcoming appointment',{autoClose:5000});}}// Schedule notifications for all upcoming appointments\nscheduleAppointmentNotifications(appointments){if(!appointments||!Array.isArray(appointments))return;try{// Initialize the notification service if not already initialized\nif(!this.initialized){this.initialize();}// Clear existing notifications\nthis.clearAllNotifications();// Schedule new notifications for upcoming appointments\nconst upcomingAppointments=appointments.filter(appointment=>appointment.status==='scheduled'&&new Date(appointment.date)>new Date());console.log(\"Scheduling notifications for \".concat(upcomingAppointments.length,\" upcoming appointments\"));upcomingAppointments.forEach(appointment=>{this.scheduleNotification(appointment);});// For debugging: if no upcoming appointments and in debug mode, show a test notification\nif(upcomingAppointments.length===0&&this.debugMode){setTimeout(()=>{this.showTestNotification();},5000);}}catch(error){console.error('Error scheduling appointment notifications:',error);}}// Clear all scheduled notifications\nclearAllNotifications(){this.notifications.forEach(notification=>{clearTimeout(notification.id);});this.notifications=[];console.log('All notifications cleared');}}// Create a singleton instance\nconst notificationService=new NotificationService();export default notificationService;","map":{"version":3,"names":["toast","NotificationService","constructor","checkPermission","notifications","initialized","debugMode","hasSupport","window","permission","Notification","requestPermission","console","log","concat","error","initialize","hasPermission","showTestNotification","title","options","body","icon","info","autoClose","scheduleNotification","appointment","date","appointmentDate","Date","hours","minutes","startTime","split","map","Number","setHours","notificationTime","_appointment$service","now","service","name","getTime","timeUntilNotification","notificationId","setTimeout","showNotification","push","id","time","cancelNotification","clearTimeout","filter","n","_appointment$service2","_appointment$business","business","scheduleAppointmentNotifications","appointments","Array","isArray","clearAllNotifications","upcomingAppointments","status","length","forEach","notification","notificationService"],"sources":["D:/Appointment Scheduler/client/src/services/NotificationService.js"],"sourcesContent":["import { toast } from 'react-toastify';\r\n\r\nclass NotificationService {\r\n  constructor() {\r\n    this.checkPermission();\r\n    this.notifications = [];\r\n    this.initialized = false;\r\n    this.debugMode = true; // Enable debug mode\r\n  }\r\n\r\n  // Check if browser notifications are supported and permission is granted\r\n  checkPermission() {\r\n    this.hasSupport = 'Notification' in window;\r\n    this.permission = this.hasSupport ? Notification.permission : 'denied';\r\n    return this.permission === 'granted';\r\n  }\r\n\r\n  // Request permission for browser notifications\r\n  async requestPermission() {\r\n    if (!this.hasSupport) {\r\n      console.log('Browser notifications not supported');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      if (this.permission !== 'granted') {\r\n        const permission = await Notification.requestPermission();\r\n        this.permission = permission;\r\n        console.log(`Notification permission: ${permission}`);\r\n        return permission === 'granted';\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error requesting notification permission:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Initialize the notification service\r\n  async initialize() {\r\n    if (this.initialized) return;\r\n    \r\n    try {\r\n      const hasPermission = await this.requestPermission();\r\n      \r\n      if (hasPermission) {\r\n        console.log('Notification permission granted');\r\n        // Send a test notification to confirm it's working\r\n        if (this.debugMode) {\r\n          this.showTestNotification();\r\n        }\r\n      } else {\r\n        console.log('Notification permission denied');\r\n      }\r\n      \r\n      this.initialized = true;\r\n    } catch (error) {\r\n      console.error('Error initializing notification service:', error);\r\n    }\r\n  }\r\n\r\n  // Show a test notification\r\n  showTestNotification() {\r\n    const title = 'Notification Test';\r\n    const options = {\r\n      body: 'Notifications are working correctly!',\r\n      icon: '/logo192.png'\r\n    };\r\n    \r\n    // Show browser notification\r\n    if (this.permission === 'granted') {\r\n      try {\r\n        new Notification(title, options);\r\n      } catch (error) {\r\n        console.error('Error showing browser notification:', error);\r\n      }\r\n    }\r\n    \r\n    // Always show toast notification\r\n    toast.info('Notification system initialized successfully', {\r\n      autoClose: 3000\r\n    });\r\n  }\r\n\r\n  // Schedule a notification for an appointment\r\n  scheduleNotification(appointment) {\r\n    if (!appointment || !appointment.date) return;\r\n    \r\n    try {\r\n      const appointmentDate = new Date(appointment.date);\r\n      const [hours, minutes] = appointment.startTime.split(':').map(Number);\r\n      appointmentDate.setHours(hours, minutes);\r\n      \r\n      // For debugging: show notification 10 seconds from now if in debug mode\r\n      let notificationTime;\r\n      if (this.debugMode) {\r\n        notificationTime = new Date(Date.now() + 10000); // 10 seconds from now\r\n        console.log(`Debug: Scheduling notification for ${appointment.service?.name} in 10 seconds`);\r\n      } else {\r\n        // Schedule notification 1 hour before appointment\r\n        notificationTime = new Date(appointmentDate.getTime() - 60 * 60 * 1000);\r\n      }\r\n      \r\n      const now = new Date();\r\n      \r\n      // Only schedule if the notification time is in the future\r\n      if (notificationTime > now) {\r\n        const timeUntilNotification = notificationTime.getTime() - now.getTime();\r\n        console.log(`Scheduling notification for ${timeUntilNotification}ms from now`);\r\n        \r\n        // Store notification info\r\n        const notificationId = setTimeout(() => {\r\n          this.showNotification(appointment);\r\n        }, timeUntilNotification);\r\n        \r\n        this.notifications.push({\r\n          id: notificationId,\r\n          appointment,\r\n          time: notificationTime\r\n        });\r\n        \r\n        return notificationId;\r\n      } else {\r\n        console.log('Notification time is in the past, not scheduling');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error scheduling notification:', error);\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  // Cancel a scheduled notification\r\n  cancelNotification(notificationId) {\r\n    clearTimeout(notificationId);\r\n    this.notifications = this.notifications.filter(n => n.id !== notificationId);\r\n  }\r\n\r\n  // Show a notification for an appointment\r\n  showNotification(appointment) {\r\n    try {\r\n      const title = `Upcoming Appointment: ${appointment.service?.name || 'Appointment'}`;\r\n      const options = {\r\n        body: `Your appointment with ${appointment.business?.name} is in 1 hour at ${appointment.startTime}.`,\r\n        icon: '/logo192.png'\r\n      };\r\n      \r\n      console.log('Showing notification:', title);\r\n      \r\n      // Show browser notification if permission granted\r\n      if (this.permission === 'granted') {\r\n        new Notification(title, options);\r\n      }\r\n      \r\n      // Always show toast notification\r\n      toast.info(title + '\\n' + options.body, {\r\n        autoClose: 10000 // 10 seconds\r\n      });\r\n    } catch (error) {\r\n      console.error('Error showing notification:', error);\r\n      // Fallback to toast notification\r\n      toast.info('You have an upcoming appointment', {\r\n        autoClose: 5000\r\n      });\r\n    }\r\n  }\r\n\r\n  // Schedule notifications for all upcoming appointments\r\n  scheduleAppointmentNotifications(appointments) {\r\n    if (!appointments || !Array.isArray(appointments)) return;\r\n    \r\n    try {\r\n      // Initialize the notification service if not already initialized\r\n      if (!this.initialized) {\r\n        this.initialize();\r\n      }\r\n      \r\n      // Clear existing notifications\r\n      this.clearAllNotifications();\r\n      \r\n      // Schedule new notifications for upcoming appointments\r\n      const upcomingAppointments = appointments.filter(appointment => \r\n        appointment.status === 'scheduled' && \r\n        new Date(appointment.date) > new Date()\r\n      );\r\n      \r\n      console.log(`Scheduling notifications for ${upcomingAppointments.length} upcoming appointments`);\r\n      \r\n      upcomingAppointments.forEach(appointment => {\r\n        this.scheduleNotification(appointment);\r\n      });\r\n      \r\n      // For debugging: if no upcoming appointments and in debug mode, show a test notification\r\n      if (upcomingAppointments.length === 0 && this.debugMode) {\r\n        setTimeout(() => {\r\n          this.showTestNotification();\r\n        }, 5000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error scheduling appointment notifications:', error);\r\n    }\r\n  }\r\n\r\n  // Clear all scheduled notifications\r\n  clearAllNotifications() {\r\n    this.notifications.forEach(notification => {\r\n      clearTimeout(notification.id);\r\n    });\r\n    this.notifications = [];\r\n    console.log('All notifications cleared');\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst notificationService = new NotificationService();\r\n\r\nexport default notificationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}