{"ast":null,"code":"import { toast } from 'react-toastify';\nclass NotificationService {\n  constructor() {\n    this.checkPermission();\n    this.notifications = [];\n    this.initialized = false;\n    this.debugMode = false; // Disable debug mode for production\n  }\n\n  // Check if browser notifications are supported and permission is granted\n  checkPermission() {\n    this.hasSupport = 'Notification' in window;\n    this.permission = this.hasSupport ? Notification.permission : 'denied';\n    return this.permission === 'granted';\n  }\n\n  // Request permission for browser notifications\n  async requestPermission() {\n    if (!this.hasSupport) {\n      console.log('Browser notifications not supported');\n      return false;\n    }\n    try {\n      if (this.permission !== 'granted') {\n        const permission = await Notification.requestPermission();\n        this.permission = permission;\n        console.log(`Notification permission: ${permission}`);\n        return permission === 'granted';\n      }\n      return true;\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return false;\n    }\n  }\n\n  // Initialize the notification service\n  async initialize() {\n    if (this.initialized) return;\n    try {\n      const hasPermission = await this.requestPermission();\n      if (hasPermission) {\n        console.log('Notification permission granted');\n        // Send a test notification to confirm it's working\n        if (this.debugMode) {\n          this.showTestNotification();\n        }\n      } else {\n        console.log('Notification permission denied');\n      }\n      this.initialized = true;\n    } catch (error) {\n      console.error('Error initializing notification service:', error);\n    }\n  }\n\n  // Show a test notification\n  showTestNotification() {\n    const title = 'Notification Test';\n    const options = {\n      body: 'Notifications are working correctly!',\n      icon: '/logo192.png'\n    };\n\n    // Show browser notification\n    if (this.permission === 'granted') {\n      try {\n        new Notification(title, options);\n      } catch (error) {\n        console.error('Error showing browser notification:', error);\n      }\n    }\n\n    // Always show toast notification\n    toast.info('Notification system initialized successfully', {\n      autoClose: 3000\n    });\n  }\n\n  // Schedule a notification for an appointment\n  scheduleNotification(appointment) {\n    if (!appointment || !appointment.date) return;\n    try {\n      const appointmentDate = new Date(appointment.date);\n      const [hours, minutes] = appointment.startTime.split(':').map(Number);\n      appointmentDate.setHours(hours, minutes);\n\n      // For debugging: show notification 10 seconds from now if in debug mode\n      let notificationTime;\n      if (this.debugMode) {\n        var _appointment$service;\n        notificationTime = new Date(Date.now() + 10000); // 10 seconds from now\n        console.log(`Debug: Scheduling notification for ${(_appointment$service = appointment.service) === null || _appointment$service === void 0 ? void 0 : _appointment$service.name} in 10 seconds`);\n      } else {\n        // Schedule notification 1 hour before appointment\n        notificationTime = new Date(appointmentDate.getTime() - 60 * 60 * 1000);\n      }\n      const now = new Date();\n\n      // Only schedule if the notification time is in the future\n      if (notificationTime > now) {\n        const timeUntilNotification = notificationTime.getTime() - now.getTime();\n        console.log(`Scheduling notification for ${timeUntilNotification}ms from now`);\n\n        // Store notification info\n        const notificationId = setTimeout(() => {\n          this.showNotification(appointment);\n        }, timeUntilNotification);\n        this.notifications.push({\n          id: notificationId,\n          appointment,\n          time: notificationTime\n        });\n        return notificationId;\n      } else {\n        console.log('Notification time is in the past, not scheduling');\n      }\n    } catch (error) {\n      console.error('Error scheduling notification:', error);\n    }\n    return null;\n  }\n\n  // Cancel a scheduled notification\n  cancelNotification(notificationId) {\n    clearTimeout(notificationId);\n    this.notifications = this.notifications.filter(n => n.id !== notificationId);\n  }\n\n  // Show a notification for an appointment\n  showNotification(appointment) {\n    try {\n      var _appointment$service2, _appointment$business;\n      const title = `Upcoming Appointment: ${((_appointment$service2 = appointment.service) === null || _appointment$service2 === void 0 ? void 0 : _appointment$service2.name) || 'Appointment'}`;\n      const options = {\n        body: `Your appointment with ${(_appointment$business = appointment.business) === null || _appointment$business === void 0 ? void 0 : _appointment$business.name} is in 1 hour at ${appointment.startTime}.`,\n        icon: '/logo192.png'\n      };\n      console.log('Showing notification:', title);\n\n      // Show browser notification if permission granted\n      if (this.permission === 'granted') {\n        new Notification(title, options);\n      }\n\n      // Always show toast notification\n      toast.info(title + '\\n' + options.body, {\n        autoClose: 10000 // 10 seconds\n      });\n    } catch (error) {\n      console.error('Error showing notification:', error);\n      // Fallback to toast notification\n      toast.info('You have an upcoming appointment', {\n        autoClose: 5000\n      });\n    }\n  }\n\n  // Schedule notifications for all upcoming appointments\n  scheduleAppointmentNotifications(appointments) {\n    if (!appointments || !Array.isArray(appointments)) return;\n    try {\n      // Initialize the notification service if not already initialized\n      if (!this.initialized) {\n        this.initialize();\n      }\n\n      // Clear existing notifications\n      this.clearAllNotifications();\n\n      // Schedule new notifications for upcoming appointments\n      const upcomingAppointments = appointments.filter(appointment => appointment.status === 'scheduled' && new Date(appointment.date) > new Date());\n      console.log(`Scheduling notifications for ${upcomingAppointments.length} upcoming appointments`);\n      upcomingAppointments.forEach(appointment => {\n        this.scheduleNotification(appointment);\n      });\n\n      // For debugging: if no upcoming appointments and in debug mode, show a test notification\n      if (upcomingAppointments.length === 0 && this.debugMode) {\n        setTimeout(() => {\n          this.showTestNotification();\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error scheduling appointment notifications:', error);\n    }\n  }\n\n  // Clear all scheduled notifications\n  clearAllNotifications() {\n    this.notifications.forEach(notification => {\n      clearTimeout(notification.id);\n    });\n    this.notifications = [];\n    console.log('All notifications cleared');\n  }\n}\n\n// Create a singleton instance\nconst notificationService = new NotificationService();\nexport default notificationService;","map":{"version":3,"names":["toast","NotificationService","constructor","checkPermission","notifications","initialized","debugMode","hasSupport","window","permission","Notification","requestPermission","console","log","error","initialize","hasPermission","showTestNotification","title","options","body","icon","info","autoClose","scheduleNotification","appointment","date","appointmentDate","Date","hours","minutes","startTime","split","map","Number","setHours","notificationTime","_appointment$service","now","service","name","getTime","timeUntilNotification","notificationId","setTimeout","showNotification","push","id","time","cancelNotification","clearTimeout","filter","n","_appointment$service2","_appointment$business","business","scheduleAppointmentNotifications","appointments","Array","isArray","clearAllNotifications","upcomingAppointments","status","length","forEach","notification","notificationService"],"sources":["D:/Appointment Scheduler/client/src/services/NotificationService.js"],"sourcesContent":["import { toast } from 'react-toastify';\r\n\r\nclass NotificationService {\r\n  constructor() {\r\n    this.checkPermission();\r\n    this.notifications = [];\r\n    this.initialized = false;\r\n    this.debugMode = false; // Disable debug mode for production\r\n  }\r\n\r\n  // Check if browser notifications are supported and permission is granted\r\n  checkPermission() {\r\n    this.hasSupport = 'Notification' in window;\r\n    this.permission = this.hasSupport ? Notification.permission : 'denied';\r\n    return this.permission === 'granted';\r\n  }\r\n\r\n  // Request permission for browser notifications\r\n  async requestPermission() {\r\n    if (!this.hasSupport) {\r\n      console.log('Browser notifications not supported');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      if (this.permission !== 'granted') {\r\n        const permission = await Notification.requestPermission();\r\n        this.permission = permission;\r\n        console.log(`Notification permission: ${permission}`);\r\n        return permission === 'granted';\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error requesting notification permission:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Initialize the notification service\r\n  async initialize() {\r\n    if (this.initialized) return;\r\n    \r\n    try {\r\n      const hasPermission = await this.requestPermission();\r\n      \r\n      if (hasPermission) {\r\n        console.log('Notification permission granted');\r\n        // Send a test notification to confirm it's working\r\n        if (this.debugMode) {\r\n          this.showTestNotification();\r\n        }\r\n      } else {\r\n        console.log('Notification permission denied');\r\n      }\r\n      \r\n      this.initialized = true;\r\n    } catch (error) {\r\n      console.error('Error initializing notification service:', error);\r\n    }\r\n  }\r\n\r\n  // Show a test notification\r\n  showTestNotification() {\r\n    const title = 'Notification Test';\r\n    const options = {\r\n      body: 'Notifications are working correctly!',\r\n      icon: '/logo192.png'\r\n    };\r\n    \r\n    // Show browser notification\r\n    if (this.permission === 'granted') {\r\n      try {\r\n        new Notification(title, options);\r\n      } catch (error) {\r\n        console.error('Error showing browser notification:', error);\r\n      }\r\n    }\r\n    \r\n    // Always show toast notification\r\n    toast.info('Notification system initialized successfully', {\r\n      autoClose: 3000\r\n    });\r\n  }\r\n\r\n  // Schedule a notification for an appointment\r\n  scheduleNotification(appointment) {\r\n    if (!appointment || !appointment.date) return;\r\n    \r\n    try {\r\n      const appointmentDate = new Date(appointment.date);\r\n      const [hours, minutes] = appointment.startTime.split(':').map(Number);\r\n      appointmentDate.setHours(hours, minutes);\r\n      \r\n      // For debugging: show notification 10 seconds from now if in debug mode\r\n      let notificationTime;\r\n      if (this.debugMode) {\r\n        notificationTime = new Date(Date.now() + 10000); // 10 seconds from now\r\n        console.log(`Debug: Scheduling notification for ${appointment.service?.name} in 10 seconds`);\r\n      } else {\r\n        // Schedule notification 1 hour before appointment\r\n        notificationTime = new Date(appointmentDate.getTime() - 60 * 60 * 1000);\r\n      }\r\n      \r\n      const now = new Date();\r\n      \r\n      // Only schedule if the notification time is in the future\r\n      if (notificationTime > now) {\r\n        const timeUntilNotification = notificationTime.getTime() - now.getTime();\r\n        console.log(`Scheduling notification for ${timeUntilNotification}ms from now`);\r\n        \r\n        // Store notification info\r\n        const notificationId = setTimeout(() => {\r\n          this.showNotification(appointment);\r\n        }, timeUntilNotification);\r\n        \r\n        this.notifications.push({\r\n          id: notificationId,\r\n          appointment,\r\n          time: notificationTime\r\n        });\r\n        \r\n        return notificationId;\r\n      } else {\r\n        console.log('Notification time is in the past, not scheduling');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error scheduling notification:', error);\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  // Cancel a scheduled notification\r\n  cancelNotification(notificationId) {\r\n    clearTimeout(notificationId);\r\n    this.notifications = this.notifications.filter(n => n.id !== notificationId);\r\n  }\r\n\r\n  // Show a notification for an appointment\r\n  showNotification(appointment) {\r\n    try {\r\n      const title = `Upcoming Appointment: ${appointment.service?.name || 'Appointment'}`;\r\n      const options = {\r\n        body: `Your appointment with ${appointment.business?.name} is in 1 hour at ${appointment.startTime}.`,\r\n        icon: '/logo192.png'\r\n      };\r\n      \r\n      console.log('Showing notification:', title);\r\n      \r\n      // Show browser notification if permission granted\r\n      if (this.permission === 'granted') {\r\n        new Notification(title, options);\r\n      }\r\n      \r\n      // Always show toast notification\r\n      toast.info(title + '\\n' + options.body, {\r\n        autoClose: 10000 // 10 seconds\r\n      });\r\n    } catch (error) {\r\n      console.error('Error showing notification:', error);\r\n      // Fallback to toast notification\r\n      toast.info('You have an upcoming appointment', {\r\n        autoClose: 5000\r\n      });\r\n    }\r\n  }\r\n\r\n  // Schedule notifications for all upcoming appointments\r\n  scheduleAppointmentNotifications(appointments) {\r\n    if (!appointments || !Array.isArray(appointments)) return;\r\n    \r\n    try {\r\n      // Initialize the notification service if not already initialized\r\n      if (!this.initialized) {\r\n        this.initialize();\r\n      }\r\n      \r\n      // Clear existing notifications\r\n      this.clearAllNotifications();\r\n      \r\n      // Schedule new notifications for upcoming appointments\r\n      const upcomingAppointments = appointments.filter(appointment => \r\n        appointment.status === 'scheduled' && \r\n        new Date(appointment.date) > new Date()\r\n      );\r\n      \r\n      console.log(`Scheduling notifications for ${upcomingAppointments.length} upcoming appointments`);\r\n      \r\n      upcomingAppointments.forEach(appointment => {\r\n        this.scheduleNotification(appointment);\r\n      });\r\n      \r\n      // For debugging: if no upcoming appointments and in debug mode, show a test notification\r\n      if (upcomingAppointments.length === 0 && this.debugMode) {\r\n        setTimeout(() => {\r\n          this.showTestNotification();\r\n        }, 5000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error scheduling appointment notifications:', error);\r\n    }\r\n  }\r\n\r\n  // Clear all scheduled notifications\r\n  clearAllNotifications() {\r\n    this.notifications.forEach(notification => {\r\n      clearTimeout(notification.id);\r\n    });\r\n    this.notifications = [];\r\n    console.log('All notifications cleared');\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst notificationService = new NotificationService();\r\n\r\nexport default notificationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}