{"ast":null,"code":"import { toast } from 'react-toastify';\nclass NotificationService {\n  constructor() {\n    this.checkPermission();\n    this.notifications = [];\n    this.initialized = false;\n  }\n\n  // Check if browser notifications are supported and permission is granted\n  checkPermission() {\n    this.hasSupport = 'Notification' in window;\n    this.permission = this.hasSupport ? Notification.permission : 'denied';\n    return this.permission === 'granted';\n  }\n\n  // Request permission for browser notifications\n  async requestPermission() {\n    if (!this.hasSupport) return false;\n    if (this.permission !== 'granted') {\n      const permission = await Notification.requestPermission();\n      this.permission = permission;\n      return permission === 'granted';\n    }\n    return true;\n  }\n\n  // Initialize the notification service\n  async initialize() {\n    if (this.initialized) return;\n    const hasPermission = await this.requestPermission();\n    if (hasPermission) {\n      console.log('Notification permission granted');\n    } else {\n      console.log('Notification permission denied');\n    }\n    this.initialized = true;\n  }\n\n  // Schedule a notification for an appointment\n  scheduleNotification(appointment) {\n    if (!appointment || !appointment.date) return;\n    const appointmentDate = new Date(appointment.date);\n    const [hours, minutes] = appointment.startTime.split(':').map(Number);\n    appointmentDate.setHours(hours, minutes);\n\n    // Schedule notification 1 hour before appointment\n    const notificationTime = new Date(appointmentDate.getTime() - 60 * 60 * 1000);\n    const now = new Date();\n\n    // Only schedule if the notification time is in the future\n    if (notificationTime > now) {\n      const timeUntilNotification = notificationTime.getTime() - now.getTime();\n\n      // Store notification info\n      const notificationId = setTimeout(() => {\n        this.showNotification(appointment);\n      }, timeUntilNotification);\n      this.notifications.push({\n        id: notificationId,\n        appointment,\n        time: notificationTime\n      });\n      return notificationId;\n    }\n    return null;\n  }\n\n  // Cancel a scheduled notification\n  cancelNotification(notificationId) {\n    clearTimeout(notificationId);\n    this.notifications = this.notifications.filter(n => n.id !== notificationId);\n  }\n\n  // Show a notification for an appointment\n  showNotification(appointment) {\n    var _appointment$service, _appointment$business;\n    const title = `Upcoming Appointment: ${((_appointment$service = appointment.service) === null || _appointment$service === void 0 ? void 0 : _appointment$service.name) || 'Appointment'}`;\n    const options = {\n      body: `Your appointment with ${(_appointment$business = appointment.business) === null || _appointment$business === void 0 ? void 0 : _appointment$business.name} is in 1 hour at ${appointment.startTime}.`,\n      icon: '/logo192.png'\n    };\n\n    // Show browser notification if permission granted\n    if (this.permission === 'granted') {\n      new Notification(title, options);\n    }\n\n    // Always show toast notification\n    toast.info(title + '\\n' + options.body, {\n      autoClose: 10000 // 10 seconds\n    });\n  }\n\n  // Schedule notifications for all upcoming appointments\n  scheduleAppointmentNotifications(appointments) {\n    if (!appointments || !Array.isArray(appointments)) return;\n\n    // Clear existing notifications\n    this.clearAllNotifications();\n\n    // Schedule new notifications for upcoming appointments\n    appointments.filter(appointment => appointment.status === 'scheduled').forEach(appointment => {\n      this.scheduleNotification(appointment);\n    });\n  }\n\n  // Clear all scheduled notifications\n  clearAllNotifications() {\n    this.notifications.forEach(notification => {\n      clearTimeout(notification.id);\n    });\n    this.notifications = [];\n  }\n}\n\n// Create a singleton instance\nconst notificationService = new NotificationService();\nexport default notificationService;","map":{"version":3,"names":["toast","NotificationService","constructor","checkPermission","notifications","initialized","hasSupport","window","permission","Notification","requestPermission","initialize","hasPermission","console","log","scheduleNotification","appointment","date","appointmentDate","Date","hours","minutes","startTime","split","map","Number","setHours","notificationTime","getTime","now","timeUntilNotification","notificationId","setTimeout","showNotification","push","id","time","cancelNotification","clearTimeout","filter","n","_appointment$service","_appointment$business","title","service","name","options","body","business","icon","info","autoClose","scheduleAppointmentNotifications","appointments","Array","isArray","clearAllNotifications","status","forEach","notification","notificationService"],"sources":["D:/Appointment Scheduler/client/src/services/NotificationService.js"],"sourcesContent":["import { toast } from 'react-toastify';\r\n\r\nclass NotificationService {\r\n  constructor() {\r\n    this.checkPermission();\r\n    this.notifications = [];\r\n    this.initialized = false;\r\n  }\r\n\r\n  // Check if browser notifications are supported and permission is granted\r\n  checkPermission() {\r\n    this.hasSupport = 'Notification' in window;\r\n    this.permission = this.hasSupport ? Notification.permission : 'denied';\r\n    return this.permission === 'granted';\r\n  }\r\n\r\n  // Request permission for browser notifications\r\n  async requestPermission() {\r\n    if (!this.hasSupport) return false;\r\n    \r\n    if (this.permission !== 'granted') {\r\n      const permission = await Notification.requestPermission();\r\n      this.permission = permission;\r\n      return permission === 'granted';\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  // Initialize the notification service\r\n  async initialize() {\r\n    if (this.initialized) return;\r\n    \r\n    const hasPermission = await this.requestPermission();\r\n    \r\n    if (hasPermission) {\r\n      console.log('Notification permission granted');\r\n    } else {\r\n      console.log('Notification permission denied');\r\n    }\r\n    \r\n    this.initialized = true;\r\n  }\r\n\r\n  // Schedule a notification for an appointment\r\n  scheduleNotification(appointment) {\r\n    if (!appointment || !appointment.date) return;\r\n    \r\n    const appointmentDate = new Date(appointment.date);\r\n    const [hours, minutes] = appointment.startTime.split(':').map(Number);\r\n    appointmentDate.setHours(hours, minutes);\r\n    \r\n    // Schedule notification 1 hour before appointment\r\n    const notificationTime = new Date(appointmentDate.getTime() - 60 * 60 * 1000);\r\n    const now = new Date();\r\n    \r\n    // Only schedule if the notification time is in the future\r\n    if (notificationTime > now) {\r\n      const timeUntilNotification = notificationTime.getTime() - now.getTime();\r\n      \r\n      // Store notification info\r\n      const notificationId = setTimeout(() => {\r\n        this.showNotification(appointment);\r\n      }, timeUntilNotification);\r\n      \r\n      this.notifications.push({\r\n        id: notificationId,\r\n        appointment,\r\n        time: notificationTime\r\n      });\r\n      \r\n      return notificationId;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  // Cancel a scheduled notification\r\n  cancelNotification(notificationId) {\r\n    clearTimeout(notificationId);\r\n    this.notifications = this.notifications.filter(n => n.id !== notificationId);\r\n  }\r\n\r\n  // Show a notification for an appointment\r\n  showNotification(appointment) {\r\n    const title = `Upcoming Appointment: ${appointment.service?.name || 'Appointment'}`;\r\n    const options = {\r\n      body: `Your appointment with ${appointment.business?.name} is in 1 hour at ${appointment.startTime}.`,\r\n      icon: '/logo192.png'\r\n    };\r\n    \r\n    // Show browser notification if permission granted\r\n    if (this.permission === 'granted') {\r\n      new Notification(title, options);\r\n    }\r\n    \r\n    // Always show toast notification\r\n    toast.info(title + '\\n' + options.body, {\r\n      autoClose: 10000 // 10 seconds\r\n    });\r\n  }\r\n\r\n  // Schedule notifications for all upcoming appointments\r\n  scheduleAppointmentNotifications(appointments) {\r\n    if (!appointments || !Array.isArray(appointments)) return;\r\n    \r\n    // Clear existing notifications\r\n    this.clearAllNotifications();\r\n    \r\n    // Schedule new notifications for upcoming appointments\r\n    appointments\r\n      .filter(appointment => appointment.status === 'scheduled')\r\n      .forEach(appointment => {\r\n        this.scheduleNotification(appointment);\r\n      });\r\n  }\r\n\r\n  // Clear all scheduled notifications\r\n  clearAllNotifications() {\r\n    this.notifications.forEach(notification => {\r\n      clearTimeout(notification.id);\r\n    });\r\n    this.notifications = [];\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst notificationService = new NotificationService();\r\n\r\nexport default notificationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}